Docker Networking 
------------------

https://www.tutorialspoint.com/docker-host-network-vs-bridge-network
https://www.tutorialspoint.com/docker/docker_networking.htm

There are three common Docker network types – bridge networks, used within a single host, overlay networks, for multi-host communication (docker-swarm)

#To see the network list

docker network ls

#To inspect the network host

docker network inspect <host_name>


#To run the container in specific host network (No need to do the port forwading it will identify automatically

docker run --name=nginx01 --network=host --detach nginx

We do not specify port mapping while using the host network because the host network driver automatically uses the “eth0” when running on linux/unix systems.

Use the below command to get the container Id.

sudo docker inspect <container−id>

docker inspect ac3f3614bdef

#To see the list of running containers

docker container ls or docker ps 

#To see the list of all containers

docker ps -a 

#To stop docker container 

docker stop containerid/container_name
docker stop ac3f3614bdef 
docker stop nginx02
docker container stop ac3f3614bdef
docker container stop  nginx02


#To start docker container 

docker stop containerid/container_name

docker start ac3f3614bdef
docker start nginx02
docker container start ac3f3614bdef
docker container start nginx02

#To remove docker container
We cannot remove running container but we need to stop the container

docker rm containerid/container_name
docker rm ac3f3614bdef
docker rm nginx02
docker container rm ac3f3614bdef
docker container rm nginx02


#To run the container in specific bridge network

docker run --name=nginx02 --network=bridge --detach nginx

In Bridge network port is not exposed when we inspect the container, it will have any port exposed 

docker inspect nginx3

ExposedPorts": {
                "80/tcp": {}
            },

Remove the container and now run the container in bridge network with port forwading 

docker run --name=nginx02 --network=bridge  -p 80:80 --detach  nginx

Now if we inspect container we can port forwading 

docker inspect nginx02

"Ports": {
                "80/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "80"
                    },
                    {
                        "HostIp": "::",
                        "HostPort": "80"
                    }
                ]
            },

docker container ls 

[root@ip-172-31-91-176 ~]# docker container ls
CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                               NAMES
4422255642c5   nginx     "/docker-entrypoint.…"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp, :::80->80/tcp   nginx02

difference between brdige network v/s host network 

If we run container in host network no need to do port forwading , 
but in case of bridge network have to mention port forwading.

#Be default if we run any container it will be created under bridge network only 

docker run --name=jenkins --network=bridge -p 8080:8080 jenkins/jenkins:lts
             
             or 

docker run --name=jenkins -p 8080:8080 jenkins/jenkins:lts

[root@ip-172-31-91-176 ~]# docker ps
CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS                                                  NAMES
ef479ab354f1   jenkins/jenkins:lts   "/sbin/tini -- /usr/…"   5 minutes ago   Up 5 minutes   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp, 50000/tcp   jenkins

docker inspect

"Ports": {
                "50000/tcp": null,
                "8080/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "8080"
                    },
                    {
                        "HostIp": "::",
                        "HostPort": "8080"
                    }
                ]
            },

Docker Swarm Installation (Docker is Mandatory)



Swarm Setup Prerequisite
-----------------------
1.Requires 2 instances (Master,Node-1)

For Identification/Difference change hostnames accordingly like master and slave/node1
hostnamectl set-hostname swarm-master
hostnamectl set-hostname slave/node1


2.Install docker on both master and node and start docker service

yum install docker -y && service docker start 

3.We need to initialize swarm in master

docker swarm init

Swarm initialized: current node (k3qajpzwjt278ts38y4hed6u1) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-3rp9nwsymspas8nd7b81nnqx1ruukykicohp7n5nvpd80zgrry-17q6uvihyqbyfrgm0ly9kghlo 172.31.87.85:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

Allow 2377 port in master ec2 machine in security group

We need to create services on the swarm 

Swarm services use a declarative model, which means that you define the desired state of the service, and rely upon Docker to maintain this state. The state includes information such as (but not limited to):

the image name and tag the service containers should run
how many containers participate in the service
whether any ports are exposed to clients outside the swarm
whether the service should start automatically when Docker starts
the specific behavior that happens when the service is restarted (such as whether a rolling restart is used)
characteristics of the nodes where the service can run (such as resource constraints and placement preferences)

https://docs.docker.com/engine/swarm/services/

Master Commands
-------------------

[root@swarm-master ~]# docker node ls
ID                            HOSTNAME       STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
kkr0ti64ydu6nz0y4n6aaevlx     slavenode1     Ready     Active                          20.10.7
k3qajpzwjt278ts38y4hed6u1 *   swarm-master   Ready     Active         Leader           20.10.7

2.Create nginx service in master 
docker service create --name nginx-service  \
                        --replicas 3 \
                        --publish published=80,target=80 \
                        nginx
                        
  --publish published=80,target=80 similar -p 80:80
  
  Published port useful for outside or access from outside
  target = 80 port is used in running the container or used in container
  

overall progress: 3 out of 3 tasks
1/3: running   [==================================================>]
2/3: running   [==================================================>]
3/3: running   [==================================================>]
verify: Service converged

[root@swarm-master ~]# docker service ls
ID             NAME            MODE         REPLICAS   IMAGE          PORTS
k94k7ihnhgeo   nginx-service   replicated   3/3        nginx:latest   *:80->80/tcp


3.docker ps 
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES
8ca6d472d060   nginx:latest   "/docker-entrypoint.…"   28 seconds ago   Up 25 seconds   80/tcp    nginx-service.1.mn8awq7xgch5749wclj64o9bq

#####Drain worker node 
[root@swarm-master ~]# docker node ls
ID                            HOSTNAME       STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
kkr0ti64ydu6nz0y4n6aaevlx     slavenode1     Ready     Active                          20.10.7
k3qajpzwjt278ts38y4hed6u1 *   swarm-master   Ready     Active         Leader           20.10.7
[root@swarm-master ~]# docker node update --availability drain slavenode1
slavenode1
[root@swarm-master ~]# docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                  PORTS     NAMES
5ab64f91bda5   nginx:latest   "/docker-entrypoint.…"   5 seconds ago    Up Less than a second   80/tcp    nginx-service.3.jpx9963y3ychyx4uwg2il9wxp
f66314694cbb   nginx:latest   "/docker-entrypoint.…"   5 seconds ago    Up Less than a second   80/tcp    nginx-service.2.w61zzihtv9a969i1ol85qi030
8ca6d472d060   nginx:latest   "/docker-entrypoint.…"   15 minutes ago   Up 15 minutes           80/tcp    nginx-service.1.mn8awq7xgch5749wclj64o9bq
####Active worker node from drain
[root@swarm-master ~]# docker node update --availability active  slavenode1
slavenode1
[root@swarm-master ~]# docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES
5ab64f91bda5   nginx:latest   "/docker-entrypoint.…"   2 minutes ago    Up 2 minutes    80/tcp    nginx-service.3.jpx9963y3ychyx4uwg2il9wxp
f66314694cbb   nginx:latest   "/docker-entrypoint.…"   2 minutes ago    Up 2 minutes    80/tcp    nginx-service.2.w61zzihtv9a969i1ol85qi030
8ca6d472d060   nginx:latest   "/docker-entrypoint.…"   18 minutes ago   Up 18 minutes   80/tcp    nginx-service.1.mn8awq7xgch5749wclj64o9bq

[root@swarm-master ~]# docker node update --availability drain swarm-master
swarm-master
[root@swarm-master ~]# docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES
5ab64f91bda5   nginx:latest   "/docker-entrypoint.…"   4 minutes ago    Up 4 minutes    80/tcp    nginx-service.3.jpx9963y3ychyx4uwg2il9wxp
f66314694cbb   nginx:latest   "/docker-entrypoint.…"   4 minutes ago    Up 4 minutes    80/tcp    nginx-service.2.w61zzihtv9a969i1ol85qi030
8ca6d472d060   nginx:latest   "/docker-entrypoint.…"   19 minutes ago   Up 19 minutes   80/tcp    nginx-service.1.mn8awq7xgch5749wclj64o9bq
[root@swarm-master ~]# docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

Now swarm-master is active but still they will be running in slave/node only whenever new traffic comes it will running on master if slave/nodes have some issues 
slave/nodel commands
-------------------

[root@slavenode1 ~]# docker swarm join --token SWMTKN-1-3rp9nwsymspas8nd7b81nnqx1ruukykicohp7n5nvpd80zgrry-17q6uvihyqbyfrgm0ly9kghlo 172.31.87.85:2377
This node joined a swarm as a worker.

2.docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES
6d7fd8677c38   nginx:latest   "/docker-entrypoint.…"   35 seconds ago   Up 31 seconds   80/tcp    nginx-service.3.rabiz3pxgharbsns57ecbsss7
dab99ca30346   nginx:latest   "/docker-entrypoint.…"   35 seconds ago   Up 31 seconds   80/tcp    nginx-service.2.uu5kzwf5jc1zsvyjkb6od3ogo


Assuem due to some reasons worker went down or master went down still we have our app running even if one of the slave/node1 is available 

Scenario-1
Master went down and workers are there , workers will run all 3 containers 

Scenario-2
If worker went down then master will run all 3 replicas

To achieve the above scenario we need to drain a node on the swarm

https://docs.docker.com/engine/swarm/swarm-tutorial/drain-node/

####After draining swarm master 

[root@slavenode1 ~]# docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES
303e1b23f272   nginx:latest   "/docker-entrypoint.…"   21 seconds ago   Up 14 seconds   80/tcp    nginx-service.2.pnzuk7yqv54q455jzr2745qdh
cd062bd5af96   nginx:latest   "/docker-entrypoint.…"   21 seconds ago   Up 14 seconds   80/tcp    nginx-service.3.qpd72pgqlqn80xltqkhsp685y
e5d272d947b6   nginx:latest   "/docker-entrypoint.…"   21 seconds ago   Up 15 seconds   80/tcp    nginx-service.1.4zgf3yrsrmtvr8arx6o1j1aj3




