1.Groovy Installation in Linux (centos,redhat,amazonlinux,amazonlinux2)

1.Install Java 11 on Amazon Linux 
Option 1: Install headless Amazon Corretto 11:
sudo yum install java-11-amazon-corretto-headless
Option 2: Install the full Amazon Corretto 11:
sudo yum install java-11-amazon-corretto
2.Check java version after installation 
[root@ip-172-31-29-247 ~]# java -version
openjdk version "11.0.13" 2021-10-19 LTS
OpenJDK Runtime Environment Corretto-11.0.13.8.1 (build 11.0.13+8-LTS)
OpenJDK 64-Bit Server VM Corretto-11.0.13.8.1 (build 11.0.13+8-LTS, mixed mode)
3.Download the groovy url using wget command
wget https://groovy.jfrog.io/artifactory/dist-release-local/groovy-zips/apache-groovy-binary-3.0.9.zip
4.Unzip the downloaded zip
unzip apache-groovy-binary-3.0.9.zip
5.Set path for the groovy installation
export PATH=$PATH:/root/groovy-3.0.9/bin
6.Check groovy version
[root@ip-172-31-29-247 ~]# groovy -version
Groovy Version: 3.0.9 JVM: 11.0.13 Vendor: Amazon.com Inc. OS: Linux

Sample For Loop Groovy Program
vi ForLoop.groovy
class ForLoop { 
   static void main(String[] args) { 
     /* int[] array = [0,1,2,3]; 
		
      for(int i in array) { 
         println(i); 
      } */

      def list = [5, 6, 7, 8]

      list.each { i ->
        
        println(i)
      }
      

   } 
}

save and exit

Compile and run the program
[root@ip-172-31-29-247 ~]# groovy ForLoop.groovy
5
6
7
8

2.Ansible Installation
1.Prerequisite is python
yum install python -y
2.Install Ansinle in amazon linux
amazon-linux-extras install ansible2 -y
3.Check ansible version after installation
[root@ip-172-31-89-165 elasticsearch]# ansible --version
ansible 2.9.23
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /bin/ansible
  python version = 2.7.18 (default, Jun 10 2021, 00:11:02) [GCC 7.3.1 20180712 (Red Hat 7.3.1-13)]

3.ELK Setup (Prerequisite Java )

https://techviewleo.com/install-elastic-stack-elk-on-amazon-linux/
https://www.elastic.co/guide/en/logstash/current/installing-logstash.html
https://www.tecmint.com/fix-firewall-cmd-command-not-found-error/
Elastic search port number : 9200
Logstash port number : 5044
Kibana port number : 5601

[root@ip-172-31-89-165 ~]# netstat -plunt | grep :5044
tcp6       0      0 :::5044                 :::*                    LISTEN      1080/java
[root@ip-172-31-89-165 ~]# netstat -plunt | grep :5601
tcp        0      0 0.0.0.0:5601            0.0.0.0:*               LISTEN      1471/node
[root@ip-172-31-89-165 ~]# netstat -plunt | grep :9200
tcp6       0      0 :::9200                 :::*                    LISTEN      3870/java

Firewall Package Install 
sudo yum install firewalld -y
Next, start firewalld and enable it to auto-start at system boot, then check its status.

$ sudo systemctl start firewalld
$ sudo systemctl enable firewalld
$ sudo systemctl status firewalld

Allow port numbers using firewall-cmd 
sudo firewall-cmd --zone=public --add-port=5000/tcp --permanent
sudo firewall-cmd --add-port=9200/tcp --permanent
sudo firewall-cmd --add-port=5601/tcp --permanent
sudo firewall-cmd --add-port=5044/tcp --permanent
sudo firewall-cmd --reload



4.Promotheus Installation

Promotheus port number : 9090

https://codewizardly.com/prometheus-on-aws-ec2-part1/
https://techviewleo.com/how-to-install-prometheus-on-amazon-linux/

Promotheus Installation
https://prometheus.io/download/
Setup Prometheus Binaries
Step 1: Update the yum package repositories.

sudo yum update -y
Step 2: Go to official Prometheus downloads page and get the download link for Linux binary.
Step 3: Create a Prometheus user, required directories, and make prometheus user as the owner of those directories.
sudo useradd --no-create-home --shell /bin/false prometheus
sudo mkdir /etc/prometheus
sudo mkdir /var/lib/prometheus
sudo chown prometheus:prometheus /etc/prometheus
sudo chown prometheus:prometheus /var/lib/prometheus

Step 4: Download the source using curl, untar it and rename the extracted folder to prometheus-files.
wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz
tar xvfz prometheus-2.19.0.linux-amd64.tar.gz
mv prometheus-2.19.0.linux-amd64 prometheus-files
Step 5: Copy prometheus and promtool binary from prometheus-files folder to /usr/local/bin and change the ownership to prometheus user.
sudo cp prometheus-files/prometheus /usr/local/bin/
sudo cp prometheus-files/promtool /usr/local/bin/
sudo chown prometheus:prometheus /usr/local/bin/prometheus
sudo chown prometheus:prometheus /usr/local/bin/promtool

Step 6: Move the consoles and console_libraries directories from prometheus-files to /etc/prometheus folder and change the ownership to prometheus user.

sudo cp -r prometheus-files/consoles /etc/prometheus
sudo cp -r prometheus-files/console_libraries /etc/prometheus
sudo chown -R prometheus:prometheus /etc/prometheus/consoles
sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries

Setup Prometheus Configuration
All the prometheus configurations should be present in /etc/prometheus/prometheus.yml file.

Step 1: Create the prometheus.yml file.

sudo vi /etc/prometheus/prometheus.yml

Step 2: Copy the following contents to the prometheus.yml file.

global:
  scrape_interval: 10s

scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9090']
	  
global:
  scrape_interval: 15s
  external_labels:
    monitor: 'prometheus'

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

Step 3: Change the ownership of the file to prometheus user.
sudo chown prometheus:prometheus /etc/prometheus/prometheus.yml

Setup Prometheus Service File

Step 1: Create a prometheus service file.

sudo vi /etc/systemd/system/prometheus.service

Step 2: Copy the following content to the file.

sudo chown prometheus:prometheus /etc/prometheus/prometheus.yml



Setup Prometheus Service File
Step 1: Create a prometheus service file.

sudo vi /etc/systemd/system/prometheus.service

Step 2: Copy the following content to the file.

[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target


Step 3: Reload the systemd service to register the prometheus service and start the prometheus service.

sudo systemctl daemon-reload
sudo systemctl start prometheus

Step-4 Check promotheus port is up and running 
netstat -plunt | grep :9090
tcp6       0      0 :::9090                 :::*                    LISTEN      5770/prometheus

Step-5
Check the prometheus service status using the following command.

sudo systemctl status prometheus

Access Prometheus Web UI
Now you will be able to access the prometheus UI on 9090 port of the prometheus server.
Sometimes if firewall is not allowed to access the site allow port number under the firewall

sudo firewall-cmd --add-port=9090/tcp --permanent (9090 promotheus port number )
sudo firewall-cmd --reload


http:ec2serverip:9090/graph
http://54.164.90.254:9090/graph
Right now we have just configured prometheus. You need to register the target in the prometheus.yml file to get the metrics from the source systems.

5.Grafana Installation

Grafana port number : 3000

https://www.radishlogic.com/aws/ec2/how-to-install-grafana-on-ec2-amazon-linux-2/
https://techviewleo.com/how-to-install-grafana-on-amazon-linux/
https://www.tecmint.com/fix-firewall-cmd-command-not-found-error/

1. Update system
 sudo apt-get update
 sudo apt-get upgrade
2. Add Grafana 6 APT repository
   Add Grafana gpg key which allows you to install signed packages.
 sudo apt-get install -y gnupg2 curl
 curl https://packages.grafana.com/gpg.key | sudo apt-key add -
   Then install Grafana APT repository:
 sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
   Once the repository is added, proceed to update your Apt repositories and install Grafana
 sudo apt-get update
 sudo apt-get -y install grafana
   Start grafana service
 sudo systemctl status grafana-server
 netstat -plunt | grep :3000
 tcp6       0      0 :::3000                 :::*                    LISTEN      6224/grafana-server
 sudo systemctl start grafana-server
 sudo systemctl enable grafana-server
Now open your browser and enter server IP address and port 3000
http://ec2ip:3000
Default logins are:
 Username: admin
 Password: admin
 
 6.Tomcat Installation (Java Pre requisite)
 
 Tomcat port number : 8080
 
 https://techviewleo.com/install-tomcat-on-amazon-linux/
 yum install firewalld
 systemctl  enable firewalld
 systemctl  start firewalld
 systemctl  status firewalld
 
 netstat -plunt | grep :8080
 tcp6       0      0 :::8080                 :::*                    LISTEN      7008/java
 
 Allow 8080 port number in Security group
 
 http://3.82.232.144:8080/

7.Mongodb Installation

Mongodb port number : 27017

https://docs.mongodb.com/manual/tutorial/install-mongodb-on-amazon/
https://devopsmyway.com/install-mongodb-on-ec2/

systemctl start mongodb-org

After starting Mongodb vefiry installation

[root@ip-172-31-92-7 ~]# rpm -qa | grep mongodb-org
mongodb-org-shell-5.0.3-1.amzn2.x86_64
mongodb-org-database-tools-extra-5.0.3-1.amzn2.x86_64
mongodb-org-tools-5.0.3-1.amzn2.x86_64
mongodb-org-server-5.0.3-1.amzn2.x86_64
mongodb-org-5.0.3-1.amzn2.x86_64
mongodb-org-mongos-5.0.3-1.amzn2.x86_64
mongodb-org-database-5.0.3-1.amzn2.x86_64
[root@ip-172-31-92-7 ~]# netstat -plunt | grep :27017
tcp        0      0 127.0.0.1:27017         0.0.0.0:*               LISTEN      7552/mongod
[root@ip-172-31-92-7 ~]# ps -ef | grep mongod
mongod    7552     1  0 06:31 ?        00:00:01 /usr/bin/mongod -f /etc/mongod.conf
root      7606  3505  0 06:33 pts/0    00:00:00 grep --color=auto mongod

Mongodb version
[root@ip-172-31-92-7 ~]# mongo --version
MongoDB shell version v5.0.3
Build Info: {
    "version": "5.0.3",
    "gitVersion": "657fea5a61a74d7a79df7aff8e4bcf0bc742b748",
    "openSSLVersion": "OpenSSL 1.0.2k-fips  26 Jan 2017",
    "modules": [],
    "allocator": "tcmalloc",
    "environment": {
        "distmod": "amazon2",
        "distarch": "x86_64",
        "target_arch": "x86_64"
    }
}

8.Cassandra Installation (Java is Prerequisite,Python Prerequisite)

Cassandra port number : 9160

https://bhargavamin.com/how-to-do/install-cassandra-on-amazon-ec2-centos/
https://abwahed.medium.com/install-cassandra-on-aws-ec2-linux-instance-303de63e0f82
https://www.globo.tech/learning-center/install-cassandra-centos-7/ working 

vi /etc/yum.repos.d/datastax.repo
[datastax] 
name = DataStax Repo for Apache Cassandra
baseurl = http://rpm.datastax.com/community
enabled = 1
gpgcheck = 0

Check whether the repo is added 
yum repolist

[root@ip-172-31-18-115 ~]# yum repolist
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered with an entitlement server. You can use subscription-manager to register.

repo id                                                         repo name
datastax                                                        DataStax Repo for Apache Cassandra
gitlab_gitlab-ce                                                gitlab_gitlab-ce
gitlab_gitlab-ce-source                                         gitlab_gitlab-ce-source
gitlab_gitlab-ee                                                gitlab_gitlab-ee
gitlab_gitlab-ee-source                                         gitlab_gitlab-ee-source
rhel-8-appstream-rhui-rpms                                      Red Hat Enterprise Linux 8 for x86_64 - AppStream from RHUI (RPMs)
rhel-8-baseos-rhui-rpms                                         Red Hat Enterprise Linux 8 for x86_64 - BaseOS from RHUI (RPMs)
rhui-client-config-server-8                                     Red Hat Update Infrastructure 3 Client Configuration Server 8
[root@ip-172-31-18-115 ~]#

#Install cassandra
yum -y install dsc20
#Check cassandra is installed using rpm,ps,netstat command
[root@ip-172-31-18-115 ~]# rpm -qa | grep cassandra
cassandra20-2.0.17-1.noarch
[root@ip-172-31-18-115 ~]# ps -au | grep cassandra
root       80336  0.0  0.0  12136  1156 pts/1    S+   19:56   0:00 grep --color=auto cassandra
#Package for netstat 
[root@ip-172-31-18-115 ~]# sudo dnf install net-tools
[root@ip-172-31-18-115 ~]# netstat -plunt | grep :9160
tcp        0      0 127.0.0.1:9160          0.0.0.0:*               LISTEN      79313/java

systemctl enable cassandra.service
systemctl start cassandra


#Connect to cassandra cli
[root@ip-172-31-18-115 ~]# cqlsh or cqlsh localhost 9160
Connected to Test Cluster at localhost:9160.
[cqlsh 4.1.1 | Cassandra 2.0.17 | CQL spec 3.1.1 | Thrift protocol 19.39.0]
Use HELP for help.
cqlsh> 

#Commands to restart/stop cassandra
systemctl restart cassandra
systemctl stop cassandra

9.GitLab CI-CD Setup/Installation

****
https://www.youtube.com/watch?v=Mt5O5wszPrg
https://www.youtube.com/watch?v=ZyQYNVOhWIY&list=PLdsu0umqbb8PGnVWX3AV7zPI8VPRYtgOv
https://www.youtube.com/watch?v=77nk8apY-jg

https://www.devopshint.com/how-to-install-gitlab-runner-on-amazon-linux-2/
http://www.notyourdadsit.com/blog/2020/10/3/gitlab-install-gitlab-runner-on-aws-linux-2
https://docs.gitlab.com/runner/install/linux-manually.html

[root@ip-172-31-18-115 ~]# history
    1  yum install wget -y
    2  clear
    3  yum install curl postfix ca-certificates openssh-server openssh-clients
    4  clear
    5  yum install policy core utils
    6  yum install policycoreutils -y
    7  systemctl enable sshd
    8  systemctl start  sshd
    9  clear
   10  systemctl enable postfix
   11  systemctl start  postfix
   12  yum install firewalld
   13  clear
   14  systemctl enable firewalld
   15  systemctl start firewalld
   16  firewall-cmd --permanent --add-service=http
   17  systemctl reload firewalld
   18  curl -sS  https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash
   19  yum install gitlab-ee -y
       rpm -qa | grep gitlab-ee
       gitlab-ee-14.4.2-ee.0.el8.x86_64
       ps -ax | grep gitlab-ee
       15698 ?        Ss     0:00 gpg-agent --homedir /var/cache/dnf/gitlab_gitlab-ee-source-dec25c9057808fd2/pubring --use-standard-socket --daemon
       16208 ?        Ss     0:00 gpg-agent --homedir /var/cache/dnf/gitlab_gitlab-ee-06493dc3ae677d64/pubring --use-standard-socket --daemon
       21030 pts/1    S+     0:00 grep --color=auto gitlab-ee
       sudo gitlab-ctl status
       run: alertmanager: (pid 18792) 722s; run: log: (pid 18265) 818s
run: gitaly: (pid 18814) 721s; run: log: (pid 17308) 947s
run: gitlab-exporter: (pid 18762) 724s; run: log: (pid 18165) 835s
run: gitlab-workhorse: (pid 18746) 725s; run: log: (pid 17976) 854s
run: grafana: (pid 18823) 721s; run: log: (pid 18610) 761s
run: logrotate: (pid 17190) 962s; run: log: (pid 17202) 960s
run: nginx: (pid 18022) 850s; run: log: (pid 18038) 847s
run: node-exporter: (pid 18756) 725s; run: log: (pid 18099) 841s
run: postgres-exporter: (pid 18803) 721s; run: log: (pid 18420) 812s
run: postgresql: (pid 17461) 939s; run: log: (pid 17481) 938s
run: prometheus: (pid 18771) 724s; run: log: (pid 18230) 822s
run: puma: (pid 17788) 868s; run: log: (pid 17795) 867s
run: redis: (pid 17239) 956s; run: log: (pid 17249) 955s
run: redis-exporter: (pid 18764) 724s; run: log: (pid 18197) 829s
run: sidekiq: (pid 17893) 862s; run: log: (pid 17923) 861s

#Reset Password for logging to GitLab
https://docs.gitlab.com/ee/security/reset_user_password.html
sudo gitlab-rake "gitlab:password:reset"

#After changing password reconfigure gitlab-ctl
gitlab-ctl reconfigure

Allow the traffic in security group and find the Ip address of the server and test in the browser
http://52.91.215.236/users/sign_in

enter the reset username and password , it will display the home page of GitLab UI

 10.Sonarqube Installation (Java is Prerequisite)
 
 Sonarqube port number : 9000
 
 sonarqube 7 supports java 8
 sonarqube 8 supports java 11
 It is not recommended to run sonarqube as root user, because sonarqube internally uses elastic search
 we need to change permission/ownership  for sonarqube folder and run_as_user in sonar.sh file 
 
 Recommended 
 Instance type t2.medium and need 2 VCPU's
 Allow port numbers in Security group
 Sonarqube 9000
 Nexus 8081 
 
 1.Install Java 11 on Amazon Linux 
Option 1: Install headless Amazon Corretto 11:
sudo yum install java-11-amazon-corretto-headless -y

https://www.sonarqube.org/downloads/

https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.1.0.47736.zip

cd /opt 

wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.1.0.47736.zip

unzip sonarqube-9.1.0.47736.zip

# Before changing the ownership check the permissions for sonarqube folder

[root@ip-172-31-30-43 ~]# getfacl sonarqube-9.1.0.47736
# file: sonarqube-9.1.0.47736
# owner: root
# group: root
user::rwx
group::r-x
other::r-x

# Change ownership for sonarqube folder from root user to ec2-user
chown ec2-user:ec2-user sonarqube-9.1.0.47736 -R

[root@ip-172-31-30-43 ~]# getfacl sonarqube-9.1.0.47736
# file: sonarqube-9.1.0.47736
# owner: ec2-user
# group: ec2-user
user::rwx
group::r-x
other::r-x

Switch to bin directory and select respective operation system and change run_as_user as ec2-user in sonar.sh file

For linux : /opt/sonarqube-9.1.0.47736/bin/linux-x86-64 
For windows : /opt/sonarqube-9.1.0.47736/bin/windows-x86-64 

Change the #RUN_AS_USER value to ec2-user in sonar.sh file
vi sonar.sh 
RUN_AS_USER=ec2-user

save changes and exit

#Run the sonar sever
sh sonar.sh <start/stop/restart/status/dump/force-stop>

sh sonar.sh start 
sh sonar.sh stop ( stop sonar server)


After starting check sonarqube is up and running

[root@ip-172-31-21-45 linux-x86-64]# netstat -plunt | grep :9000
tcp6       0      0 :::9000                 :::*                    LISTEN      3993/java


Open and browser and login to sonar server with server Ip

Ip:9000

http://54.204.94.224:9000/

default credentials
username : admin
password : admin

To check code quality or analyze the project we need to generate sonar token

My Account ---> Security ---> Generate Tokens <enter token_name> --> Generate

copy the token otherwise it will disappeared : 20b16826873641fa4848c6eba7e0297f60734384

Sonarqube Integration with maven

Maven Installation 
https://maven.apache.org/download.cgi

(a)Download maven url using wget command maven 
url https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz

wget https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz
(b) untar the maven downloaded tar 
tar -xvzf apache-maven-3.8.3-bin.tar.gz
(c) Set maven path where it is installed using export and add to path variable
vi /etc/profile.d/maven.sh
export MAVEN_HOME=/opt/apache-maven-3.8.3
export PATH=$PATH:$MAVEN_HOME/bin
(d) save the changes by source command 
source /etc/profile.d/maven.sh

or 
(2)Instead of step c and d we can set path using export command 
export PATH=$PATH:/opt/apache-maven-3.8.3/bin
or 
(3)Set the maven path in bash rc file
vi /root/.bashrc
export MAVEN_HOME=/opt/apache-maven-3.8.3
export PATH=$PATH:$MAVEN_HOME/bin
save the changes by source command 
source /etc/profile.d/maven.sh


(e) verify installation or maven version 
mvn --version
Apache Maven 3.8.3 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)
Maven home: /opt/apache-maven-3.8.3
Java version: 1.8.0_282, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.282.b08-1.amzn2.0.1.x86_64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "4.14.231-173.361.amzn2.x86_64", arch: "amd64", family: "unix"


Maven Integration with Sonarqube

Install git to clone the project and analyze using sonarqube

git clone https://github.com/cloudtechmasters/springboothello-CICD.git

cd springboothello-CICD

https://www.baeldung.com/sonar-qube
https://mvnrepository.com/artifact/org.sonarsource.scanner.maven/sonar-maven-plugin

#add sonarqube plugin in maven pom.xml 

            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>3.4.0.905</version>
            </plugin>
	    
#After adding plugin run the maven command to analyze/scan the project

Sonarqube will look the java classes in target folder 

#clean and build the project to generate classes in target folder
mvn clean install 

mvn sonar:sonar -Dsonar.host.url=http://localhost:9000 
  -Dsonar.login=the-generated-token
 
mvn sonar:sonar -Dsonar.host.url=http://54.204.94.224:9000  -Dsonar.login=20b16826873641fa4848c6eba7e0297f60734384 -Dsonar.java.binaries=target/classes

Once the build is success we can see the projects in Sonarqube Dashboard under Projects Sonarqube ignores 2 code smells if it crosses Quality gate status will be failed 

Sometimes if the develop the code with System.out for printing data the sonqrqube will detect as code smells to avoid that we have to use Logger instead of System.out

https://mkyong.com/spring-boot/spring-boot-slf4j-logging-example/

After making code changes we need to build the project to reflect the changes and followed by sonarqube command

Maven Integration with Nexus

https://devopscube.com/how-to-install-latest-sonatype-nexus-3-on-linux/
1.Install Nexus and add 8081 port number in security group
2.Start nexus and open in web using server ip and port number
http://54.204.94.224:8081/
3.Sign to nexus server
default credentials
username: admin
password can be found in the location : /opt/sonatype-work/nexus3/admin.password
fc7de13a-20ce-493d-8c3d-b31f552a9f38
Prompt for reset new password and Disable anonymous access
setup is completed for nexus

Now we need to deploy jar/war from target directory after maven build to nexus using maven deploy command

Build got failed because of maven doesnt know the location maven 

[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) on project 
gs-spring-boot: Deployment failed: repository element was not specified in the POM inside distributionManagement element or in 
-DaltDeploymentRepository=id::layout::url parameter -> [Help 1]

Add below properties or url in maven to deploy to nexus
1.We need to mention where is nexus repository located 
2.We need to mention snapshot respository url ( deploy application jar/war to dev,qa envs)
if version is with snapshot it will go to nexus snapshot repository 
3.We need to mention release repository url  (deploy application jar/war to perf,pre-prod and prod envs)
if version is without snapshot it will go to nexus release repository 
<distributionManagement>
   <snapshotRepository>
      <id>maven-snapshots</id>
      <url>http://54.204.94.224:8081/repository/maven-snapshots/</url>
   </snapshotRepository>
   <repository>
      <id>maven-releases</id>
      <url>http://54.204.94.224:8081/repository/maven-releases/</url>
   </repository>
</distributionManagement>

4.We need to add username and password for nexus in maven /opt/apache-maven-3.8.3/conf/settings.xml

5.Id element present in distribution management for snapshot and release repositories 

vi settings.xml
----------
    <server>
      <id>maven-snapshots</id>
      <username>admin</username>
      <password>vamsi</password>
    </server>
	<server>
      <id>maven-releases</id>
      <username>admin</username>
      <password>vamsi</password>
    </server>
   
   6.mvn deploy
   
   jar is uploaded to release repository based on version 
   
    <groupId>org.springframework</groupId>
    <artifactId>gs-spring-boot</artifactId>
    <version>0.1.0</version>

   http://54.204.94.224:8081/#browse/browse:maven-releases
   
   http://54.204.94.224:8081/service/rest/repository/browse/maven-releases/org/springframework/gs-spring-boot/0.1.0/
   
   
Name	Last Modified	Size	Description
Parent Directory
gs-spring-boot-0.1.0.jar	Tue Nov 16 08:18:34 UTC 2021	16225078	
gs-spring-boot-0.1.0.jar.md5	Tue Nov 16 08:18:35 UTC 2021	32	
gs-spring-boot-0.1.0.jar.sha1	Tue Nov 16 08:18:35 UTC 2021	40	
gs-spring-boot-0.1.0.pom	Tue Nov 16 08:18:35 UTC 2021	2067	
gs-spring-boot-0.1.0.pom.md5	Tue Nov 16 08:18:35 UTC 2021	32	
gs-spring-boot-0.1.0.pom.sha1	Tue Nov 16 08:18:35 UTC 2021	40	

if we update the version 0.2.0 new version will be there with 0.2.0 

 <version>0.2.0</version>
 
http://54.204.94.224:8081/service/rest/repository/browse/maven-releases/org/springframework/gs-spring-boot/
Name	Last Modified	Size	Description
Parent Directory
0.1.0	 	 	
0.2.0	 	 	
maven-metadata.xml	Tue Nov 16 08:28:46 UTC 2021	344	
maven-metadata.xml.md5	Tue Nov 16 08:28:46 UTC 2021	32	
maven-metadata.xml.sha1	Tue Nov 16 08:28:46 UTC 2021	40	

7.If the project has snapshot version it will deploy to snapshot repository

<version>0.2.0-SNAPSHOT</version>


[root@ip-172-31-21-45 springboothello-CICD] # mvn deploy

[INFO] --- maven-deploy-plugin:2.8.2:deploy (default-deploy) @ gs-spring-boot ---
Downloading from maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/maven-metadata.xml
Uploading to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/gs-spring-boot-0.2.0-20211116.083505-1.jar
Uploaded to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/gs-spring-boot-0.2.0-20211116.083505-1.jar (16 MB at 17 MB/s)
Uploading to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/gs-spring-boot-0.2.0-20211116.083505-1.pom
Uploaded to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/gs-spring-boot-0.2.0-20211116.083505-1.pom (2.1 kB at 21 kB/s)
Downloading from maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/maven-metadata.xml
Uploading to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/maven-metadata.xml
Uploaded to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/maven-metadata.xml (783 B at 12 kB/s)
Uploading to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/maven-metadata.xml
Uploaded to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/maven-metadata.xml (293 B at 7.0 kB/s)

Snapshot will be uploaded to snapshot repository

http://54.204.94.224:8081/service/rest/repository/browse/maven-snapshots/org/springframework/gs-spring-boot/

When we will do build it will generate snapshot version based on build 

http://54.204.94.224:8081/service/rest/repository/browse/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/0.2.0-20211116.083505-1/

Index of /org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/0.2.0-20211116.083505-1
Name	Last Modified	Size	Description
Parent Directory
gs-spring-boot-0.2.0-20211116.083505-1.jar	Tue Nov 16 08:35:08 UTC 2021	16225116	
gs-spring-boot-0.2.0-20211116.083505-1.jar.md5	Tue Nov 16 08:35:08 UTC 2021	32	
gs-spring-boot-0.2.0-20211116.083505-1.jar.sha1	Tue Nov 16 08:35:08 UTC 2021	40	
gs-spring-boot-0.2.0-20211116.083505-1.pom	Tue Nov 16 08:35:08 UTC 2021	2085	
gs-spring-boot-0.2.0-20211116.083505-1.pom.md5	Tue Nov 16 08:35:08 UTC 2021	32	
gs-spring-boot-0.2.0-20211116.083505-1.pom.sha1	Tue Nov 16 08:35:08 UTC 2021	40	

8.If we make the changes and build the project followed by mvn deploy everytime it will generate new time stamp with in the same build 

Downloading from maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/maven-metadata.xml
Downloaded from maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/maven-metadata.xml (783 B at 4.4 kB/s)
Uploading to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/gs-spring-boot-0.2.0-20211116.084022-2.jar
Uploaded to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/gs-spring-boot-0.2.0-20211116.084022-2.jar (16 MB at 16 MB/s)
Uploading to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/gs-spring-boot-0.2.0-20211116.084022-2.pom
Uploaded to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/gs-spring-boot-0.2.0-20211116.084022-2.pom (2.1 kB at 22 kB/s)
Downloading from maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/maven-metadata.xml
Downloaded from maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/maven-metadata.xml (293 B at 11 kB/s)
Uploading to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/maven-metadata.xml
Uploaded to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/maven-metadata.xml (783 B at 12 kB/s)
Uploading to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/maven-metadata.xml
Uploaded to maven-snapshots: http://54.204.94.224:8081/repository/maven-snapshots/org/springframework/gs-spring-boot/maven-metadata.xml (293 B at 5.9 kB/s)


http://54.204.94.224:8081/service/rest/repository/browse/maven-snapshots/org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/0.2.0-20211116.084022-2/

Index of /org/springframework/gs-spring-boot/0.2.0-SNAPSHOT/0.2.0-20211116.084022-2
Name	Last Modified	Size	Description
Parent Directory
gs-spring-boot-0.2.0-20211116.084022-2.jar	Tue Nov 16 08:40:25 UTC 2021	16225116	
gs-spring-boot-0.2.0-20211116.084022-2.jar.md5	Tue Nov 16 08:40:25 UTC 2021	32	
gs-spring-boot-0.2.0-20211116.084022-2.jar.sha1	Tue Nov 16 08:40:25 UTC 2021	40	
gs-spring-boot-0.2.0-20211116.084022-2.pom	Tue Nov 16 08:40:25 UTC 2021	2085	
gs-spring-boot-0.2.0-20211116.084022-2.pom.md5	Tue Nov 16 08:40:25 UTC 2021	32	
gs-spring-boot-0.2.0-20211116.084022-2.pom.sha1	Tue Nov 16 08:40:25 UTC 2021	40	


11.Boto/Boto3 Installation

1. You’ll first use the yum package manager to install Python and the pip Python package installer:

yum install python python-devel python-pip -y

2. Now we will install the Boto package via pip:

pip install boto3 

3.Check boto3 version using pip

[root@ip-172-31-26-237 ~]# pip show boto3
DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
Name: boto3
Version: 1.17.112
Summary: The AWS SDK for Python
Home-page: https://github.com/boto/boto3
Author: Amazon Web Services
Author-email: None
License: Apache License 2.0
Location: /usr/lib/python2.7/site-packages
Requires: jmespath, s3transfer, botocore
Required-by:

4.Check boto3 version python program or command line 

[root@ip-172-31-26-237 ~]# python -c "
> import boto3;
> print boto3.__version__"
1.17.112

12.Jfrog artifactory (Java is Prerequisite)

Jfrog Port numbers : 8081 (java)
                     8082 (jf-router)

# https://www.devopsschool.com/blog/artifactory-install-and-configurations-guide/

yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel -y

RPM File – Download, Install & Run Artifactory OSS
1.wget https://bintray.com/jfrog/artifactory-rpms/rpm -O bintray-jfrog-artifactory-rpms.repo

2.sudo mv bintray-jfrog-artifactory-rpms.repo /etc/yum.repos.d/

3.After moving check repo is added to repos.d

[root@ip-172-31-26-237 ~]# yum repolist
Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
repo id                                                        repo name                                                       status
amzn2-core/2/x86_64                                            Amazon Linux 2 core repository                                  26,801
amzn2extra-docker/2/x86_64                                     Amazon Extras repo for docker                                       52
bintray--jfrog-artifactory-rpms                                bintray--jfrog-artifactory-rpms                                    654
repolist: 27,507


4.sudo yum install jfrog-artifactory-oss -y

5.Start artifactory service

systemctl start artifactory.service
systemctl status artifactory.service
systemctl stop artifactory.service
 
service artifactory status
service artifactory start
service artifactory stop


6.After starting check ,installation,repository is up and running using netstat and rpm,ps command
[root@ip-172-31-26-237 ~]# netstat -plunt | grep :8081
tcp6       0      0 :::8081                 :::*                    LISTEN      7202/java
[root@ip-172-31-26-237 ~]# netstat -plunt | grep :8082
tcp6       0      0 :::8082                 :::*                    LISTEN      7605/jf-router


[root@ip-172-31-26-237 ~]# rpm -qa | grep artifactory
jfrog-artifactory-oss-7.27.10-72710900.x86_64

[root@ip-172-31-26-237 ~]# ps -aux | grep artifactory
artifac+  7202 77.7 32.2 5122328 1301276 ?     Sl   13:47   1:14 /opt/jfrog/artifactory/app/third-party/java/bin/java -Djava.util.logging.config.file=/opt/jfrog/artifactory/app/artifactory/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -server -Xms512m -Xmx2g -XX:+UseG1GC -XX:OnOutOfMemoryError=kill -9 %p --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.lang.invoke=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED -Dfile.encoding=UTF8 -Djruby.compile.invokedynamic=false -Djruby.bytecode.version=1.8 -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true -Djava.security.egd=file:/dev/./urandom -Dartdist=rpm -Djf.product.home=/opt/jfrog/artifactory -Djruby.bytecode.version=1.8 -Dignore.endorsed.dirs= -classpath /opt/jfrog/artifactory/app/artifactory/tomcat/bin/bootstrap.jar:/opt/jfrog/artifactory/app/artifactory/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/opt/jfrog/artifactory/app/artifactory/tomcat -Dcatalina.home=/opt/jfrog/artifactory/app/artifactory/tomcat -Djava.io.tmpdir=/opt/jfrog/artifactory/var/work/artifactory/tomcat/temp org.apache.catalina.startup.Bootstrap start
artifac+  7605  1.3  1.5 1388836 63036 ?       Sl   13:47   0:00 /opt/jfrog/artifactory/app/router/bin/jf-router
artifac+  7765  0.6  0.9 1128864 40336 ?       Sl   13:47   0:00 /opt/jfrog/artifactory/app/metadata/bin/jf-metadata
artifac+  7910  0.8  1.1 598360 46156 ?        Sl   13:47   0:00 /opt/jfrog/artifactory/app/third-party/node/bin/node /opt/jfrog/artifactory/app/frontend/bin/server/dist/startup.js /opt/jfrog/artifactory/app/frontend
artifac+  8027  0.0  0.6 1187244 24676 ?       Sl   13:47   0:00 /opt/jfrog/artifactory/app/observability/bin/jf-observability
artifac+  8059  2.4  1.9 947096 77056 ?        Sl   13:47   0:01 /opt/jfrog/artifactory/app/third-party/node/bin/node /opt/jfrog/artifactory/app/frontend/bin/server/dist/bundle.js
root      8120  0.0  0.0 119420   876 pts/0    S+   13:48   0:00 grep --color=auto artifactory


7.Allow port numbers 8081 and 8082 in security groups and access webui with server ip and port

http://54.147.58.35:8082/ui/ (if we use 8081 also it will be redirected to 8082 (jf-router)

default credentials

username : admin
password : password

once we are able to login using default credentials , we can reset password

13.Mysql Installation

Mysql port number : 3306

https://techviewleo.com/how-to-install-mysql-8-on-amazon-linux-2/ 

Personal or Practise we can prefer t2.micro , but in office we have to use R family R4 or R5 instances

1.Generally if we want to install any software in linux we can look for 
Redhat/Centos  family ---- rpm files
Ubuntu family ---- debian files

Generally if we want to install any software in Windows  we can look for either .exe or msi files

2.If the rpm file is not available we need to look/create repositories and enable them on our machine

ex: mongodb installation we need create under yum.repos.d (redhat/centos family)

3.If both rpm and repositories are not available we need to look/download 

tar.gz 
zip extension folders and extract using tar or unzip 

ex: for maven installation we need to download tar.gz folders and extract 

Start the mysql server daemon

[root@ip-172-31-15-191 ~]# service mysqld start
Redirecting to /bin/systemctl start mysqld.service
[root@ip-172-31-15-191 ~]# service mysqld status
Redirecting to /bin/systemctl status mysqld.service
● mysqld.service - MySQL Server
   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)
   Active: active (running) since Tue 2021-11-16 15:23:36 UTC; 4s ago
     Docs: man:mysqld(8)
           http://dev.mysql.com/doc/refman/en/using-systemd.html
  Process: 3038 ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=0/SUCCESS)
 Main PID: 3111 (mysqld)
   Status: "Server is operational"
   CGroup: /system.slice/mysqld.service
           └─3111 /usr/sbin/mysqld

Nov 16 15:23:30 ip-172-31-15-191.ec2.internal systemd[1]: Starting MySQL Server...
Nov 16 15:23:36 ip-172-31-15-191.ec2.internal systemd[1]: Started MySQL Server.


After installation mysql community server check mysql is installed using rpm,ps and listening the port using netstat command

[root@ip-172-31-15-191 ~]# rpm -qa | grep mysql
mysql80-community-release-el7-3.noarch
mysql-community-common-8.0.27-1.el7.x86_64
mysql-community-server-8.0.27-1.el7.x86_64
mysql-community-client-plugins-8.0.27-1.el7.x86_64
mysql-community-libs-8.0.27-1.el7.x86_64
mysql-community-client-8.0.27-1.el7.x86_64
mysql-community-libs-compat-8.0.27-1.el7.x86_64
[root@ip-172-31-15-191 ~]# ps -aux | grep mysql
root      2912  0.0  0.0 241824  7188 pts/0    T    15:20   0:00 sudo yum install mysql-community-server
root      2913  0.1  0.2 364492 32884 pts/0    T    15:20   0:00 /usr/bin/python /bin/yum install mysql-community-server

[root@ip-172-31-15-191 ~]# netstat -plunt | grep :3306
tcp6       0      0 :::33060                :::*                    LISTEN      3111/mysqld
tcp6       0      0 :::3306                 :::*                    LISTEN      3111/mysqld

#After resetting/altering  password connect to mysql database with new generated one 

 mysql -u root -pMyNewStrongP@ssw0d!
 
 ##If we want to connect to mysql database running on ec2-instance from local machine##
 
 1.We need to allow remote connection
 
 https://phoenixnap.com/kb/mysql-remote-connection
 
Mysql Conf file :  vi /etc/my.cnf
 
 bind-address = 0.0.0.0
 
 restart mysql server 
 
 service mysqld restart
 
 2.To connect to remote mysql database from local windows machine we need to use sql work-bench (remote databases connect)and 
 3.Download corressponding mysql jar to connect to mysql database and connect to jdbc url
 
 java jdbc url ://Server Ip:mysql port/default database
 jdbc:mysql://3.215.181.18:3306/mysql
 
 





