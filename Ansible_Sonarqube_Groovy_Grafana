1.Groovy Installation in Linux (centos,redhat,amazonlinux,amazonlinux2)

1.Install Java 11 on Amazon Linux 
Option 1: Install headless Amazon Corretto 11:
sudo yum install java-11-amazon-corretto-headless
Option 2: Install the full Amazon Corretto 11:
sudo yum install java-11-amazon-corretto
2.Check java version after installation 
[root@ip-172-31-29-247 ~]# java -version
openjdk version "11.0.13" 2021-10-19 LTS
OpenJDK Runtime Environment Corretto-11.0.13.8.1 (build 11.0.13+8-LTS)
OpenJDK 64-Bit Server VM Corretto-11.0.13.8.1 (build 11.0.13+8-LTS, mixed mode)
3.Download the groovy url using wget command
wget https://groovy.jfrog.io/artifactory/dist-release-local/groovy-zips/apache-groovy-binary-3.0.9.zip
4.Unzip the downloaded zip
unzip apache-groovy-binary-3.0.9.zip
5.Set path for the groovy installation
export PATH=$PATH:/root/groovy-3.0.9/bin
6.Check groovy version
[root@ip-172-31-29-247 ~]# groovy -version
Groovy Version: 3.0.9 JVM: 11.0.13 Vendor: Amazon.com Inc. OS: Linux

Sample For Loop Groovy Program
vi ForLoop.groovy
class ForLoop { 
   static void main(String[] args) { 
     /* int[] array = [0,1,2,3]; 
		
      for(int i in array) { 
         println(i); 
      } */

      def list = [5, 6, 7, 8]

      list.each { i ->
        
        println(i)
      }
      

   } 
}

save and exit

Compile and run the program
[root@ip-172-31-29-247 ~]# groovy ForLoop.groovy
5
6
7
8

2.Ansible Installation
1.Prerequisite is python
yum install python -y
2.Install Ansinle in amazon linux
amazon-linux-extras install ansible2 -y
3.Check ansible version after installation
[root@ip-172-31-89-165 elasticsearch]# ansible --version
ansible 2.9.23
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /bin/ansible
  python version = 2.7.18 (default, Jun 10 2021, 00:11:02) [GCC 7.3.1 20180712 (Red Hat 7.3.1-13)]

3.ELK Setup (Prerequisite Java )

https://techviewleo.com/install-elastic-stack-elk-on-amazon-linux/
https://www.elastic.co/guide/en/logstash/current/installing-logstash.html
https://www.tecmint.com/fix-firewall-cmd-command-not-found-error/

[root@ip-172-31-89-165 ~]# netstat -plunt | grep :5044
tcp6       0      0 :::5044                 :::*                    LISTEN      1080/java
[root@ip-172-31-89-165 ~]# netstat -plunt | grep :5601
tcp        0      0 0.0.0.0:5601            0.0.0.0:*               LISTEN      1471/node
[root@ip-172-31-89-165 ~]# netstat -plunt | grep :9200
tcp6       0      0 :::9200                 :::*                    LISTEN      3870/java

Firewall Package Install 
sudo yum install firewalld -y
Next, start firewalld and enable it to auto-start at system boot, then check its status.

$ sudo systemctl start firewalld
$ sudo systemctl enable firewalld
$ sudo systemctl status firewalld

Allow port numbers using firewall-cmd 
sudo firewall-cmd --zone=public --add-port=5000/tcp --permanent
sudo firewall-cmd --add-port=9200/tcp --permanent
sudo firewall-cmd --add-port=5601/tcp --permanent
sudo firewall-cmd --add-port=5044/tcp --permanent
sudo firewall-cmd --reload



4.Promotheus Installation

https://codewizardly.com/prometheus-on-aws-ec2-part1/
https://techviewleo.com/how-to-install-prometheus-on-amazon-linux/

Promotheus Installation
https://prometheus.io/download/
Setup Prometheus Binaries
Step 1: Update the yum package repositories.

sudo yum update -y
Step 2: Go to official Prometheus downloads page and get the download link for Linux binary.
Step 3: Create a Prometheus user, required directories, and make prometheus user as the owner of those directories.
sudo useradd --no-create-home --shell /bin/false prometheus
sudo mkdir /etc/prometheus
sudo mkdir /var/lib/prometheus
sudo chown prometheus:prometheus /etc/prometheus
sudo chown prometheus:prometheus /var/lib/prometheus

Step 4: Download the source using curl, untar it and rename the extracted folder to prometheus-files.
wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz
tar xvfz prometheus-2.19.0.linux-amd64.tar.gz
mv prometheus-2.19.0.linux-amd64 prometheus-files
Step 5: Copy prometheus and promtool binary from prometheus-files folder to /usr/local/bin and change the ownership to prometheus user.
sudo cp prometheus-files/prometheus /usr/local/bin/
sudo cp prometheus-files/promtool /usr/local/bin/
sudo chown prometheus:prometheus /usr/local/bin/prometheus
sudo chown prometheus:prometheus /usr/local/bin/promtool

Step 6: Move the consoles and console_libraries directories from prometheus-files to /etc/prometheus folder and change the ownership to prometheus user.

sudo cp -r prometheus-files/consoles /etc/prometheus
sudo cp -r prometheus-files/console_libraries /etc/prometheus
sudo chown -R prometheus:prometheus /etc/prometheus/consoles
sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries

Setup Prometheus Configuration
All the prometheus configurations should be present in /etc/prometheus/prometheus.yml file.

Step 1: Create the prometheus.yml file.

sudo vi /etc/prometheus/prometheus.yml

Step 2: Copy the following contents to the prometheus.yml file.

global:
  scrape_interval: 10s

scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9090']
	  
global:
  scrape_interval: 15s
  external_labels:
    monitor: 'prometheus'

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

Step 3: Change the ownership of the file to prometheus user.
sudo chown prometheus:prometheus /etc/prometheus/prometheus.yml

Setup Prometheus Service File

Step 1: Create a prometheus service file.

sudo vi /etc/systemd/system/prometheus.service

Step 2: Copy the following content to the file.

sudo chown prometheus:prometheus /etc/prometheus/prometheus.yml



Setup Prometheus Service File
Step 1: Create a prometheus service file.

sudo vi /etc/systemd/system/prometheus.service

Step 2: Copy the following content to the file.

[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target


Step 3: Reload the systemd service to register the prometheus service and start the prometheus service.

sudo systemctl daemon-reload
sudo systemctl start prometheus

Step-4 Check promotheus port is up and running 
netstat -plunt | grep :9090
tcp6       0      0 :::9090                 :::*                    LISTEN      5770/prometheus

Step-5
Check the prometheus service status using the following command.

sudo systemctl status prometheus

Access Prometheus Web UI
Now you will be able to access the prometheus UI on 9090 port of the prometheus server.
Sometimes if firewall is not allowed to access the site allow port number under the firewall

sudo firewall-cmd --add-port=9090/tcp --permanent (9090 promotheus port number )
sudo firewall-cmd --reload


http:ec2serverip:9090/graph
http://54.164.90.254:9090/graph
Right now we have just configured prometheus. You need to register the target in the prometheus.yml file to get the metrics from the source systems.

5.Grafana Installation

https://www.radishlogic.com/aws/ec2/how-to-install-grafana-on-ec2-amazon-linux-2/
https://techviewleo.com/how-to-install-grafana-on-amazon-linux/
https://www.tecmint.com/fix-firewall-cmd-command-not-found-error/

1. Update system
 sudo apt-get update
 sudo apt-get upgrade
2. Add Grafana 6 APT repository
   Add Grafana gpg key which allows you to install signed packages.
 sudo apt-get install -y gnupg2 curl
 curl https://packages.grafana.com/gpg.key | sudo apt-key add -
   Then install Grafana APT repository:
 sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
   Once the repository is added, proceed to update your Apt repositories and install Grafana
 sudo apt-get update
 sudo apt-get -y install grafana
   Start grafana service
 sudo systemctl status grafana-server
 netstat -plunt | grep :3000
 tcp6       0      0 :::3000                 :::*                    LISTEN      6224/grafana-server
 sudo systemctl start grafana-server
 sudo systemctl enable grafana-server
Now open your browser and enter server IP address and port 3000
http://ec2ip:3000
Default logins are:
 Username: admin
 Password: admin
 
 6.Tomcat Installation (Java Pre requisite)
 
 https://techviewleo.com/install-tomcat-on-amazon-linux/
 yum install firewalld
 systemctl  enable firewalld
 systemctl  start firewalld
 systemctl  status firewalld
 
 netstat -plunt | grep :8080
 tcp6       0      0 :::8080                 :::*                    LISTEN      7008/java
 
 Allow 8080 port number in Security group
 
 http://3.82.232.144:8080/

7.Mongodb Installation

https://docs.mongodb.com/manual/tutorial/install-mongodb-on-amazon/
https://devopsmyway.com/install-mongodb-on-ec2/

systemctl start mongodb-org

After starting Mongodb vefiry installation

[root@ip-172-31-92-7 ~]# rpm -qa | grep mongodb-org
mongodb-org-shell-5.0.3-1.amzn2.x86_64
mongodb-org-database-tools-extra-5.0.3-1.amzn2.x86_64
mongodb-org-tools-5.0.3-1.amzn2.x86_64
mongodb-org-server-5.0.3-1.amzn2.x86_64
mongodb-org-5.0.3-1.amzn2.x86_64
mongodb-org-mongos-5.0.3-1.amzn2.x86_64
mongodb-org-database-5.0.3-1.amzn2.x86_64
[root@ip-172-31-92-7 ~]# netstat -plunt | grep :27017
tcp        0      0 127.0.0.1:27017         0.0.0.0:*               LISTEN      7552/mongod
[root@ip-172-31-92-7 ~]# ps -ef | grep mongod
mongod    7552     1  0 06:31 ?        00:00:01 /usr/bin/mongod -f /etc/mongod.conf
root      7606  3505  0 06:33 pts/0    00:00:00 grep --color=auto mongod

Mongodb version
[root@ip-172-31-92-7 ~]# mongo --version
MongoDB shell version v5.0.3
Build Info: {
    "version": "5.0.3",
    "gitVersion": "657fea5a61a74d7a79df7aff8e4bcf0bc742b748",
    "openSSLVersion": "OpenSSL 1.0.2k-fips  26 Jan 2017",
    "modules": [],
    "allocator": "tcmalloc",
    "environment": {
        "distmod": "amazon2",
        "distarch": "x86_64",
        "target_arch": "x86_64"
    }
}

8.Cassandra Installation (Java is Prerequisite,Python Prerequisite)

https://bhargavamin.com/how-to-do/install-cassandra-on-amazon-ec2-centos/
https://abwahed.medium.com/install-cassandra-on-aws-ec2-linux-instance-303de63e0f82
https://www.globo.tech/learning-center/install-cassandra-centos-7/ working 

vi /etc/yum.repos.d/datastax.repo
[datastax] 
name = DataStax Repo for Apache Cassandra
baseurl = http://rpm.datastax.com/community
enabled = 1
gpgcheck = 0

Check whether the repo is added 
yum repolist

[root@ip-172-31-18-115 ~]# yum repolist
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered with an entitlement server. You can use subscription-manager to register.

repo id                                                         repo name
datastax                                                        DataStax Repo for Apache Cassandra
gitlab_gitlab-ce                                                gitlab_gitlab-ce
gitlab_gitlab-ce-source                                         gitlab_gitlab-ce-source
gitlab_gitlab-ee                                                gitlab_gitlab-ee
gitlab_gitlab-ee-source                                         gitlab_gitlab-ee-source
rhel-8-appstream-rhui-rpms                                      Red Hat Enterprise Linux 8 for x86_64 - AppStream from RHUI (RPMs)
rhel-8-baseos-rhui-rpms                                         Red Hat Enterprise Linux 8 for x86_64 - BaseOS from RHUI (RPMs)
rhui-client-config-server-8                                     Red Hat Update Infrastructure 3 Client Configuration Server 8
[root@ip-172-31-18-115 ~]#

#Install cassandra
yum -y install dsc20
#Check cassandra is installed using rpm,ps,netstat command
[root@ip-172-31-18-115 ~]# rpm -qa | grep cassandra
cassandra20-2.0.17-1.noarch
[root@ip-172-31-18-115 ~]# ps -au | grep cassandra
root       80336  0.0  0.0  12136  1156 pts/1    S+   19:56   0:00 grep --color=auto cassandra
#Package for netstat 
[root@ip-172-31-18-115 ~]# sudo dnf install net-tools
[root@ip-172-31-18-115 ~]# netstat -plunt | grep :9160
tcp        0      0 127.0.0.1:9160          0.0.0.0:*               LISTEN      79313/java

systemctl enable cassandra.service
systemctl start cassandra


#Connect to cassandra cli
[root@ip-172-31-18-115 ~]# cqlsh or cqlsh localhost 9160
Connected to Test Cluster at localhost:9160.
[cqlsh 4.1.1 | Cassandra 2.0.17 | CQL spec 3.1.1 | Thrift protocol 19.39.0]
Use HELP for help.
cqlsh> 

#Commands to restart/stop cassandra
systemctl restart cassandra
systemctl stop cassandra

9.GitLab CI-CD Setup/Installation

****
https://www.youtube.com/watch?v=Mt5O5wszPrg
https://www.youtube.com/watch?v=ZyQYNVOhWIY&list=PLdsu0umqbb8PGnVWX3AV7zPI8VPRYtgOv
https://www.youtube.com/watch?v=77nk8apY-jg

https://www.devopshint.com/how-to-install-gitlab-runner-on-amazon-linux-2/
http://www.notyourdadsit.com/blog/2020/10/3/gitlab-install-gitlab-runner-on-aws-linux-2
https://docs.gitlab.com/runner/install/linux-manually.html

[root@ip-172-31-18-115 ~]# history
    1  yum install wget -y
    2  clear
    3  yum install curl postfix ca-certificates openssh-server openssh-clients
    4  clear
    5  yum install policy core utils
    6  yum install policycoreutils -y
    7  systemctl enable sshd
    8  systemctl start  sshd
    9  clear
   10  systemctl enable postfix
   11  systemctl start  postfix
   12  yum install firewalld
   13  clear
   14  systemctl enable firewalld
   15  systemctl start firewalld
   16  firewall-cmd --permanent --add-service=http
   17  systemctl reload firewalld
   18  curl -sS  https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash
   19  yum install gitlab-ee -y
       rpm -qa | grep gitlab-ee
       gitlab-ee-14.4.2-ee.0.el8.x86_64
       ps -ax | grep gitlab-ee
       15698 ?        Ss     0:00 gpg-agent --homedir /var/cache/dnf/gitlab_gitlab-ee-source-dec25c9057808fd2/pubring --use-standard-socket --daemon
       16208 ?        Ss     0:00 gpg-agent --homedir /var/cache/dnf/gitlab_gitlab-ee-06493dc3ae677d64/pubring --use-standard-socket --daemon
       21030 pts/1    S+     0:00 grep --color=auto gitlab-ee
       sudo gitlab-ctl status
       run: alertmanager: (pid 18792) 722s; run: log: (pid 18265) 818s
run: gitaly: (pid 18814) 721s; run: log: (pid 17308) 947s
run: gitlab-exporter: (pid 18762) 724s; run: log: (pid 18165) 835s
run: gitlab-workhorse: (pid 18746) 725s; run: log: (pid 17976) 854s
run: grafana: (pid 18823) 721s; run: log: (pid 18610) 761s
run: logrotate: (pid 17190) 962s; run: log: (pid 17202) 960s
run: nginx: (pid 18022) 850s; run: log: (pid 18038) 847s
run: node-exporter: (pid 18756) 725s; run: log: (pid 18099) 841s
run: postgres-exporter: (pid 18803) 721s; run: log: (pid 18420) 812s
run: postgresql: (pid 17461) 939s; run: log: (pid 17481) 938s
run: prometheus: (pid 18771) 724s; run: log: (pid 18230) 822s
run: puma: (pid 17788) 868s; run: log: (pid 17795) 867s
run: redis: (pid 17239) 956s; run: log: (pid 17249) 955s
run: redis-exporter: (pid 18764) 724s; run: log: (pid 18197) 829s
run: sidekiq: (pid 17893) 862s; run: log: (pid 17923) 861s

#Reset Password for logging to GitLab
https://docs.gitlab.com/ee/security/reset_user_password.html
sudo gitlab-rake "gitlab:password:reset"

#After changing password reconfigure gitlab-ctl
gitlab-ctl reconfigure

Allow the traffic in security group and find the Ip address of the server and test in the browser
http://52.91.215.236/users/sign_in

enter the reset username and password , it will display the home page of GitLab UI

 
 


